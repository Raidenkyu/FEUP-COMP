/* jmm.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. jmm.java */
package jjt;

import java.io.*;

public class jmm/*@bgen(jjtree)*/implements jmmTreeConstants, jmmConstants {/*@bgen(jjtree)*/
  protected static JJTjmmState jjtree = new JJTjmmState();static boolean has_error = false, parsed = false;
    static int[][] tokenCache;

    static void pushTokenCache() {
        jmm.tokenCache = new int[2][2];
        jmm.tokenCache[0][0] = jmm.token.beginLine;
        jmm.tokenCache[0][1] = jmm.token.beginColumn;
        jmm.tokenCache[1][0] = jmm.token.endLine;
        jmm.tokenCache[1][1] = jmm.token.endColumn + 1;
    }

    /**
     * Called directly through the command line, used on checkpoint 1.
     */
    public static void main(String[] args) {
        if (args.length == 0) {
            System.err.println("Usage: java jjt.jmm java-file [number of recoveries]");
            System.exit(1);
        }

        File file = new File(args[0]);
        if (args.length > 1) ParseException.numberRecoveries = Integer.parseInt(args[1]);

        try {
            SimpleNode root = parseClass(file);
            if (root != null) root.dump("");
        } catch (FileNotFoundException e) {
            System.err.println(e.getMessage());
            System.exit(1);
        } catch (ParseException e) {
            System.err.println(e.getMessage());
            System.exit(1);
        }
    }

    public static SimpleNode parseClass(File file) throws FileNotFoundException, ParseException {
        FileReader fr = new FileReader(file);
        ParseException.file = file.toString();
        jmm myProg = new jmm(fr);

        SimpleNode root = jmm.Program();
        return root;
    }

    public static SimpleNode parseAssignment(File file) throws FileNotFoundException, ParseException {
        FileReader fr = new FileReader(file);
        ParseException.file = file.toString();
        jmm myProg = new jmm(fr);

        SimpleNode root = jmm.ProgramAssignment();
        return root;
    }

    public static SimpleNode parseExpression(File file) throws FileNotFoundException, ParseException {
        FileReader fr = new FileReader(file);
        ParseException.file = file.toString();
        jmm myProg = new jmm(fr);

        SimpleNode root = jmm.ProgramExpression();
        return root;
    }

    public static SimpleNode parseTerm(File file) throws FileNotFoundException, ParseException {
        FileReader fr = new FileReader(file);
        ParseException.file = file.toString();
        jmm myProg = new jmm(fr);

        SimpleNode root = jmm.ProgramTerm();
        return root;
    }

  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ClassDeclaration();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode ProgramExpression() throws ParseException {/*@bgen(jjtree) ProgramExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode ProgramTerm() throws ParseException {/*@bgen(jjtree) ProgramTerm */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Term4();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode ProgramAssignment() throws ParseException {/*@bgen(jjtree) ProgramAssignment */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      IdentifierStatement();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

// According to the Java Identifier specification, 'length' is a valid
// identifier. So we should accept method names called 'length' along with
// the construct 'variable.length'. This generates a difficult lookahead issue
// at ObjectAccessTail() and then LengthTail(), as the two different constructs
// Length(1) and Call(3) interact with the previous <LENGTH> token differently.
// The first does not add <LENGTH> to the AST, while the second does, and it
// needs its begin and end line/column. So we add <LENGTH> to the jmm cache,
// and 'pop' it only if necessary.
  static final public void Length() throws ParseException {
    jj_consume_token(LENGTH);
jmm.pushTokenCache();
  }

  static final public void MethodNameLength() throws ParseException {/*@bgen(jjtree) MethodName */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetVal("length");
        jjtn000.cacheBegin = jmm.tokenCache[0];
        jjtn000.cacheEnd = jmm.tokenCache[1];
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

// *** Terminals with Values
  static final public void Integer() throws ParseException {/*@bgen(jjtree) Integer */
                  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
                  jjtn000.jjtSetFirstToken(getToken(1));Token token;
    try {
      token = jj_consume_token(INTEGERLITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetVal(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void MethodName() throws ParseException {/*@bgen(jjtree) MethodName */
                     SimpleNode jjtn000 = new SimpleNode(JJTMETHODNAME);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        token = jj_consume_token(IDENTIFIER);
        break;
        }
      case MAIN:{
        token = jj_consume_token(MAIN);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetVal(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ClassMethodName() throws ParseException {/*@bgen(jjtree) MethodName */
                                      SimpleNode jjtn000 = new SimpleNode(JJTMETHODNAME);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
                                      jjtn000.jjtSetFirstToken(getToken(1));Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        token = jj_consume_token(IDENTIFIER);
        break;
        }
      case MAIN:{
        token = jj_consume_token(MAIN);
        break;
        }
      case LENGTH:{
        token = jj_consume_token(LENGTH);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetVal(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ClassType() throws ParseException {/*@bgen(jjtree) ClassType */
                    SimpleNode jjtn000 = new SimpleNode(JJTCLASSTYPE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        token = jj_consume_token(IDENTIFIER);
        break;
        }
      case MAIN:{
        token = jj_consume_token(MAIN);
        break;
        }
      case LENGTH:{
        token = jj_consume_token(LENGTH);
        break;
        }
      case STRING:{
        token = jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetVal(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
                     SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        token = jj_consume_token(IDENTIFIER);
        break;
        }
      case MAIN:{
        token = jj_consume_token(MAIN);
        break;
        }
      case LENGTH:{
        token = jj_consume_token(LENGTH);
        break;
        }
      case STRING:{
        token = jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetVal(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

// *** Expression
  static final public void Expression() throws ParseException {
    Term1();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      Op1();
    }
  }

  static final public void ExpressionTail() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      Op4();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUM:
      case SUB:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      Op3();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      Op2();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      Op1();
    }
  }

  static final public void LiteralExpression() throws ParseException {
    LiteralTerm4();
    ExpressionTail();
  }

  static final public void IdentifierExpression() throws ParseException {
    IdentifierTerm4();
    ExpressionTail();
  }

// *** Term
  static final public void Term1() throws ParseException {
    Term2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      Op2();
    }
  }

  static final public void Term2() throws ParseException {
    Term3();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUM:
      case SUB:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      Op3();
    }
  }

  static final public void Term3() throws ParseException {
    Term4();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      Op4();
    }
  }

  static final public void Term4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case NOT:
    case LCB:
    case INTEGERLITERAL:{
      LiteralTerm4();
      break;
      }
    case MAIN:
    case STRING:
    case LENGTH:
    case IDENTIFIER:{
      IdentifierTerm4();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LiteralTerm4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGERLITERAL:{
      Integer();
      TermTail();
      break;
      }
    case TRUE:{
SimpleNode jjtn001 = new SimpleNode(JJTTRUE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      TermTail();
      break;
      }
    case FALSE:{
SimpleNode jjtn002 = new SimpleNode(JJTFALSE);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      TermTail();
      break;
      }
    case THIS:{
SimpleNode jjtn003 = new SimpleNode(JJTTHIS);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
      TermTail();
      break;
      }
    case LCB:{
      jj_consume_token(LCB);
      Expression();
      jj_consume_token(RCB);
      TermTail();
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      NewTerm();
      TermTail();
      break;
      }
    case NOT:{
      NOT();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IdentifierTerm4() throws ParseException {
    Identifier();
    TermTail();
  }

  static final public void TermTail() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POINT:
      case LSB:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSB:{
        ArrayAccess();
        break;
        }
      case POINT:{
        ObjectAccess();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ArrayAccess() throws ParseException {
SimpleNode jjtn001 = new SimpleNode(JJTBRACKET);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LSB);
      Expression();
      jj_consume_token(RSB);
    } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ObjectAccess() throws ParseException {
    jj_consume_token(POINT);
    ObjectAccessTail();
  }

  static final public void ObjectAccessTail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:{
      Length();
      LengthTail();
      break;
      }
    case MAIN:
    case IDENTIFIER:{
      MethodName();
      jj_consume_token(LCB);
      ArgumentList();
SimpleNode jjtn001 = new SimpleNode(JJTCALL);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                        jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RCB);
      } finally {
if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001,  3);
                                          jjtn001.jjtSetLastToken(getToken(0));
                                        }
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LengthTail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCB:{
      MethodNameLength();
      jj_consume_token(LCB);
      ArgumentList();
SimpleNode jjtn001 = new SimpleNode(JJTCALL);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                              jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RCB);
      } finally {
if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  3);
                                                jjtn001.jjtSetLastToken(getToken(0));
                                              }
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
SimpleNode jjtn002 = new SimpleNode(JJTLENGTH);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn002,  1);
      jjtc002 = false;
      jjtn002.jjtSetLastToken(getToken(0));

      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
        jjtn002.jjtSetLastToken(getToken(0));
      }
      }
    }
  }

  static final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case NOT:
      case MAIN:
      case STRING:
      case LENGTH:
      case LCB:
      case INTEGERLITERAL:
      case IDENTIFIER:{
        Expression();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void NewTerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      jj_consume_token(LSB);
      Expression();
SimpleNode jjtn001 = new SimpleNode(JJTNEWINTARRAY);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RSB);
      } finally {
if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  1);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
      }
      break;
      }
    case MAIN:
    case STRING:
    case LENGTH:
    case IDENTIFIER:{
      ClassType();
      jj_consume_token(LCB);
SimpleNode jjtn002 = new SimpleNode(JJTNEWCLASS);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RCB);
      } finally {
if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  1);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// *** Operators
  static final public void Op1() throws ParseException {
    jj_consume_token(AND);
SimpleNode jjtn001 = new SimpleNode(JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
    try {
      Term1();
    } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
    }
  }

  static final public void Op2() throws ParseException {
    jj_consume_token(LT);
SimpleNode jjtn001 = new SimpleNode(JJTLT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
    try {
      Term2();
    } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
    }
  }

  static final public void Op3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUM:{
      jj_consume_token(SUM);
SimpleNode jjtn001 = new SimpleNode(JJTSUM);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Term3();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
SimpleNode jjtn002 = new SimpleNode(JJTSUB);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
      try {
        Term3();
      } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
      }
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Op4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      jj_consume_token(MUL);
SimpleNode jjtn001 = new SimpleNode(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Term4();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
SimpleNode jjtn002 = new SimpleNode(JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
      try {
        Term4();
      } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NOT() throws ParseException {/*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NOT);
      Term4();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

// *** Statements
// * Statement Types:
//   * BlockStatement(*)  { ... }
//   * IfElseStatement(3) if (Condition) TrueBranch else ElseBranch
//   * WhileStatement(2)  while (Condition) LoopBody
//   * PlainStatement(1)  Expression
//   * Assignment(2)      Target = Value
  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFTKEY:{
      BlockStatement();
      break;
      }
    case IF:{
      IfElseStatement();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case NOT:
    case MAIN:
    case STRING:
    case LENGTH:
    case LCB:
    case INTEGERLITERAL:
    case IDENTIFIER:{
      LineStatement();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BlockStatement() throws ParseException {/*@bgen(jjtree) BlockStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LEFTKEY);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case NEW:
        case THIS:
        case TRUE:
        case FALSE:
        case NOT:
        case MAIN:
        case STRING:
        case LENGTH:
        case LEFTKEY:
        case LCB:
        case INTEGERLITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        Statement();
      }
      jj_consume_token(RIGHTKEY);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void IfElseStatement() throws ParseException {/*@bgen(jjtree) IfElseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(LCB);
      Expression();
      jj_consume_token(RCB);
      Statement();
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        jj_consume_token(WHILE);
        jj_consume_token(LCB);
      } catch (ParseException e) {
e.advance();
      }
      try {
        Expression();
        try {
          jj_consume_token(RCB);
        } catch (ParseException e) {
e.advance();
        }
      } catch (ParseException e) {
e.skipto(new int[]{RCB, IF, WHILE, LEFTKEY}).consumeif(RCB);
      }
      try {
        Statement();
      } catch (ParseException e) {
e.skipto(new int[]{RIGHTKEY, SEMICOLON}).consume();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void LineStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case NOT:
    case LCB:
    case INTEGERLITERAL:{
      LiteralLineStatement();
      break;
      }
    case MAIN:
    case STRING:
    case LENGTH:
    case IDENTIFIER:{
      IdentifierStatement();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Expression ;   FOR NON IDENTIFIERS
  static final public void LiteralLineStatement() throws ParseException {
    LiteralExpression();
SimpleNode jjtn001 = new SimpleNode(JJTPLAINSTATEMENT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  1);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
    }
  }

// Identifier = Expression ;
// Identifier [ Expression ] = Expression ;
// Expression ;   FOR IDENTIFIERS
  static final public void IdentifierStatement() throws ParseException {
    Identifier();
    IdentifierStatementTail();
  }

  static final public void IdentifierStatementTail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      jj_consume_token(EQUAL);
SimpleNode jjtn001 = new SimpleNode(JJTASSIGNMENT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
      }
      break;
      }
    case LSB:{
      ArrayAccess();
      ArrayAccessIdentifierStatementTail();
      break;
      }
    case POINT:{
      ObjectAccess();
      TermTail();
      ExpressionTail();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ExpressionTail();
    }
SimpleNode jjtn002 = new SimpleNode(JJTPLAINSTATEMENT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ArrayAccessIdentifierStatementTail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      jj_consume_token(EQUAL);
SimpleNode jjtn001 = new SimpleNode(JJTASSIGNMENT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtn001.jjtSetLastToken(getToken(0));
              }
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      TermTail();
      ExpressionTail();
    }
  }

  static final public void LiteralStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFTKEY:{
      BlockStatement();
      break;
      }
    case IF:{
      IfElseStatement();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case NOT:
    case LCB:
    case INTEGERLITERAL:{
      LiteralLineStatement();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// *** Types
  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      PrimitiveType();
      break;
      }
    case MAIN:
    case STRING:
    case LENGTH:
    case IDENTIFIER:{
      ClassType();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      IntType();
      break;
      }
    case BOOLEAN:{
SimpleNode jjtn001 = new SimpleNode(JJTBOOLEAN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BOOLEAN);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IntType() throws ParseException {
SimpleNode jjtn001 = new SimpleNode(JJTINT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INT);
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LSB:{
      jj_consume_token(LSB);
SimpleNode jjtn002 = new SimpleNode(JJTINTARRAY);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RSB);
      } finally {
if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  1);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

// *** Method Body (Declarations and Statements)
  static final public void MethodBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      PrimitiveType();
SimpleNode jjtn001 = new SimpleNode(JJTVARIABLEDECLARATION);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Identifier();
      } catch (Throwable jjte001) {
if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
      }
      jj_consume_token(SEMICOLON);
      MethodBody();
      break;
      }
    case MAIN:
    case STRING:
    case LENGTH:
    case IDENTIFIER:{
      Identifier();
      AssignmentOrDeclaration();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case NOT:
      case LEFTKEY:
      case LCB:
      case INTEGERLITERAL:{
        LiteralStatement();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case NEW:
          case THIS:
          case TRUE:
          case FALSE:
          case NOT:
          case MAIN:
          case STRING:
          case LENGTH:
          case LEFTKEY:
          case LCB:
          case INTEGERLITERAL:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            break label_12;
          }
          Statement();
        }
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    }
  }

  static final public void AssignmentOrDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIN:
    case STRING:
    case LENGTH:
    case IDENTIFIER:{
      Identifier();
SimpleNode jjtn001 = new SimpleNode(JJTVARIABLEDECLARATION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SEMICOLON);
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
      }
      MethodBody();
      break;
      }
    case SEMICOLON:
    case EQUAL:
    case AND:
    case LT:
    case SUM:
    case SUB:
    case MUL:
    case DIV:
    case POINT:
    case LSB:{
      IdentifierStatementTail();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case NEW:
        case THIS:
        case TRUE:
        case FALSE:
        case NOT:
        case MAIN:
        case STRING:
        case LENGTH:
        case LEFTKEY:
        case LCB:
        case INTEGERLITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_13;
        }
        Statement();
      }
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// *** Parameters
  static final public void Parameter() throws ParseException {/*@bgen(jjtree) Parameter */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ParameterList() throws ParseException {/*@bgen(jjtree) ParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case MAIN:
      case STRING:
      case LENGTH:
      case IDENTIFIER:{
        Parameter();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            break label_14;
          }
          jj_consume_token(COMMA);
          Parameter();
        }
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void MainParameterList() throws ParseException {/*@bgen(jjtree) MainParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STRING);
      jj_consume_token(LSB);
      jj_consume_token(RSB);
      Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

// *** Methods
  static final public void MainDeclaration() throws ParseException {/*@bgen(jjtree) MainDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LCB);
      MainParameterList();
      jj_consume_token(RCB);
      jj_consume_token(LEFTKEY);
SimpleNode jjtn001 = new SimpleNode(JJTMETHODBODY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        MethodBody();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      jj_consume_token(RIGHTKEY);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      ClassMethodName();
      jj_consume_token(LCB);
      ParameterList();
      jj_consume_token(RCB);
      jj_consume_token(LEFTKEY);
SimpleNode jjtn001 = new SimpleNode(JJTMETHODBODY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        MethodBody();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      ReturnStatement();
      jj_consume_token(RIGHTKEY);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

// *** Class
  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ClassHeader();
      ClassBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ClassHeader() throws ParseException {/*@bgen(jjtree) ClassHeader */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CLASS);
      ClassType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        Extends();
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void Extends() throws ParseException {/*@bgen(jjtree) Extends */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTENDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXTENDS);
      ClassType();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ClassBody() throws ParseException {/*@bgen(jjtree) ClassBody */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LEFTKEY);
      ClassVarDeclarations();
      ClassMethodDeclarations();
      jj_consume_token(RIGHTKEY);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ClassVarDeclaration() throws ParseException {/*@bgen(jjtree) ClassVarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      Identifier();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ClassMethodDeclaration() throws ParseException {
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC:{
      MainDeclaration();
      break;
      }
    case INT:
    case BOOLEAN:
    case MAIN:
    case STRING:
    case LENGTH:
    case IDENTIFIER:{
      MethodDeclaration();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ClassVarDeclarations() throws ParseException {/*@bgen(jjtree) ClassVarDeclarations */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSVARDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case MAIN:
        case STRING:
        case LENGTH:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_15;
        }
        ClassVarDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ClassMethodDeclarations() throws ParseException {/*@bgen(jjtree) ClassMethodDeclarations */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSMETHODDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          break label_16;
        }
        ClassMethodDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public jmmTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x2000000,0x60000000,0x18000000,0x4000000,0x2000000,0x4000000,0x18000000,0x60000000,0x80078000,0x80078000,0x0,0x0,0x0,0x0,0x400000,0x80078000,0x100000,0x18000000,0x60000000,0x8007d000,0x8007d000,0x80078000,0x1000000,0x1000000,0x8007d000,0x300000,0x300000,0x0,0x8007d000,0x8007d000,0x300000,0x8007d000,0x7f800000,0x400000,0x300000,0x400,0x300100,0x300000,0x80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x802,0x80a,0x80e,0x80e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0e,0x500,0x41,0x41,0x80a,0x100,0x0,0xd0e,0x80e,0x0,0x0,0xd1e,0xd1e,0xd0e,0x41,0x0,0x510,0x80e,0x0,0x40,0xd1e,0x510,0x80e,0xd1e,0x84f,0x0,0x80e,0x0,0x80e,0x80e,0x0,};
   }

  /** Constructor with InputStream. */
  public jmm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public jmm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new jmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public jmm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new jmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public jmm(jmmTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(jmmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
