/* Program.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Program.java */
public class Program/*@bgen(jjtree)*/implements ProgramTreeConstants, ProgramConstants {/*@bgen(jjtree)*/
  protected static JJTProgramState jjtree = new JJTProgramState();public static void main(String args[]) throws ParseException {
    Program myProg = new Program(System.in);
    SimpleNode root = myProg.Program(); // devolve referência para o nó raiz da árvore
    root.dump(""); // imprime no ecrã a árvore
 }

  static final public SimpleNode Program() throws ParseException {
    trace_call("Program");
    try {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        ClassDeclaration();
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Program");
    }
  }

  static final public void ClassDeclaration() throws ParseException {
    trace_call("ClassDeclaration");
    try {/*@bgen(jjtree) ClassDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(CLASS);
        jj_consume_token(IDENTIFIER);
        if (jj_2_1(3)) {
          jj_consume_token(EXTENDS);
          jj_consume_token(IDENTIFIER);
        } else {
          ;
        }
        jj_consume_token(LEFTKEY);
        label_1:
        while (true) {
          if (jj_2_2(3)) {
            ;
          } else {
            break label_1;
          }
          VarDeclaration();
        }
        label_2:
        while (true) {
          if (jj_2_3(3)) {
            ;
          } else {
            break label_2;
          }
          Declaration();
        }
        jj_consume_token(RIGHTKEY);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("ClassDeclaration");
    }
  }

  static final public void Declaration() throws ParseException {
    trace_call("Declaration");
    try {/*@bgen(jjtree) Declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PUBLIC);
        if (jj_2_4(3)) {
          MainDeclaration();
        } else if (jj_2_5(3)) {
          MethodDeclaration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("Declaration");
    }
  }

  static final public void VarDeclaration() throws ParseException {
    trace_call("VarDeclaration");
    try {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(INTEGER);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("VarDeclaration");
    }
  }

  static final public void MainDeclaration() throws ParseException {
    trace_call("MainDeclaration");
    try {/*@bgen(jjtree) MainDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(STATIC);
        jj_consume_token(VOID);
        jj_consume_token(MAIN);
        jj_consume_token(LCB);
        jj_consume_token(STRING);
        jj_consume_token(LSB);
        jj_consume_token(RSB);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(RCB);
        jj_consume_token(LEFTKEY);
        label_3:
        while (true) {
          if (jj_2_6(3)) {
            ;
          } else {
            break label_3;
          }
          VarDeclaration();
        }
        label_4:
        while (true) {
          if (jj_2_7(3)) {
            ;
          } else {
            break label_4;
          }
          Statement();
        }
        jj_consume_token(RIGHTKEY);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("MainDeclaration");
    }
  }

  static final public void MethodDeclaration() throws ParseException {
    trace_call("MethodDeclaration");
    try {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PUBLIC);
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LCB);
        if (jj_2_9(3)) {
          Type();
          jj_consume_token(IDENTIFIER);
          label_5:
          while (true) {
            if (jj_2_8(3)) {
              ;
            } else {
              break label_5;
            }
            jj_consume_token(COMMA);
            Type();
            jj_consume_token(IDENTIFIER);
          }
        } else {
          ;
        }
        jj_consume_token(RCB);
        jj_consume_token(LEFTKEY);
        label_6:
        while (true) {
          if (jj_2_10(3)) {
            ;
          } else {
            break label_6;
          }
          VarDeclaration();
        }
        label_7:
        while (true) {
          if (jj_2_11(3)) {
            ;
          } else {
            break label_7;
          }
          Statement();
        }
        jj_consume_token(RETURN);
        Expression();
        jj_consume_token(SEMICOLON);
        jj_consume_token(RIGHTKEY);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("MethodDeclaration");
    }
  }

  static final public void Type() throws ParseException {
    trace_call("Type");
    try {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_12(3)) {
          Int();
        } else if (jj_2_13(3)) {
          jj_consume_token(BOOLEAN);
        } else if (jj_2_14(3)) {
          jj_consume_token(IDENTIFIER);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("Type");
    }
  }

  static final public void Int() throws ParseException {
    trace_call("Int");
    try {/*@bgen(jjtree) Int */
  SimpleNode jjtn000 = new SimpleNode(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(INT);
        if (jj_2_15(3)) {
          jj_consume_token(LSB);
          jj_consume_token(RSB);
        } else {
          ;
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("Int");
    }
  }

  static final public void Statement() throws ParseException {
    trace_call("Statement");
    try {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_17(3)) {
          jj_consume_token(LEFTKEY);
          label_8:
          while (true) {
            if (jj_2_16(3)) {
              ;
            } else {
              break label_8;
            }
            Statement();
          }
          jj_consume_token(RIGHTKEY);
        } else if (jj_2_18(3)) {
          jj_consume_token(IF);
          jj_consume_token(LCB);
          Expression();
          jj_consume_token(RCB);
          Statement();
          jj_consume_token(ELSE);
          Statement();
        } else if (jj_2_19(3)) {
          jj_consume_token(WHILE);
          jj_consume_token(LCB);
          Expression();
          jj_consume_token(RCB);
          Statement();
        } else if (jj_2_20(3)) {
          Expression();
          jj_consume_token(SEMICOLON);
        } else if (jj_2_21(3)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(EQUAL);
          Expression();
          jj_consume_token(SEMICOLON);
        } else if (jj_2_22(3)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LSB);
          Expression();
          jj_consume_token(RSB);
          jj_consume_token(EQUAL);
          Expression();
          jj_consume_token(SEMICOLON);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("Statement");
    }
  }

  static final public void Expression() throws ParseException {
    trace_call("Expression");
    try {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        ExpressionTerminals();
        if (jj_2_23(3)) {
          ExpressionL();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("Expression");
    }
  }

  static final public void ExpressionL() throws ParseException {
    trace_call("ExpressionL");
    try {/*@bgen(jjtree) ExpressionL */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_30(3)) {
          if (jj_2_24(3)) {
            jj_consume_token(AND);
          } else if (jj_2_25(3)) {
            jj_consume_token(LT);
          } else if (jj_2_26(3)) {
            jj_consume_token(SUM);
          } else if (jj_2_27(3)) {
            jj_consume_token(SUB);
          } else if (jj_2_28(3)) {
            jj_consume_token(MUL);
          } else if (jj_2_29(3)) {
            jj_consume_token(DIV);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          Expression();
        } else if (jj_2_31(3)) {
          jj_consume_token(LSB);
          Expression();
          jj_consume_token(RSB);
        } else if (jj_2_32(3)) {
          Point();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("ExpressionL");
    }
  }

  static final public void Point() throws ParseException {
    trace_call("Point");
    try {/*@bgen(jjtree) Point */
  SimpleNode jjtn000 = new SimpleNode(JJTPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(POINT);
        AfterPoint();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("Point");
    }
  }

  static final public void AfterPoint() throws ParseException {
    trace_call("AfterPoint");
    try {/*@bgen(jjtree) AfterPoint */
  SimpleNode jjtn000 = new SimpleNode(JJTAFTERPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_34(3)) {
          jj_consume_token(LENGTH);
        } else if (jj_2_35(3)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LCB);
          Expression();
          label_9:
          while (true) {
            if (jj_2_33(3)) {
              ;
            } else {
              break label_9;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          jj_consume_token(RCB);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("AfterPoint");
    }
  }

  static final public void New() throws ParseException {
    trace_call("New");
    try {/*@bgen(jjtree) New */
  SimpleNode jjtn000 = new SimpleNode(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(NEW);
        AfterNew();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("New");
    }
  }

  static final public void AfterNew() throws ParseException {
    trace_call("AfterNew");
    try {/*@bgen(jjtree) AfterNew */
  SimpleNode jjtn000 = new SimpleNode(JJTAFTERNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_36(3)) {
          jj_consume_token(INT);
          jj_consume_token(LSB);
          Expression();
          jj_consume_token(RSB);
        } else if (jj_2_37(3)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LCB);
          jj_consume_token(RCB);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("AfterNew");
    }
  }

  static final public void ExpressionTerminals() throws ParseException {
    trace_call("ExpressionTerminals");
    try {/*@bgen(jjtree) ExpressionTerminals */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONTERMINALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_38(3)) {
          jj_consume_token(TRUE);
        } else if (jj_2_39(3)) {
          jj_consume_token(FALSE);
        } else if (jj_2_40(3)) {
          jj_consume_token(IDENTIFIER);
        } else if (jj_2_41(3)) {
          jj_consume_token(THIS);
        } else if (jj_2_42(3)) {
          New();
        } else if (jj_2_43(3)) {
          jj_consume_token(EXC);
          Expression();
        } else if (jj_2_44(3)) {
          jj_consume_token(LCB);
          Expression();
          jj_consume_token(RCB);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
      }
    } finally {
      trace_return("ExpressionTerminals");
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_3_20()
 {
    if (jj_3R_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LCB)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LCB)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(LSB)) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (!jj_rescan) trace_call("Statement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) { if (!jj_rescan) trace_return("Statement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("Statement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_17()
 {
    if (jj_scan_token(LEFTKEY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHTKEY)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (!jj_rescan) trace_call("Int(LOOKING AHEAD...)");
    if (jj_scan_token(INT)) { if (!jj_rescan) trace_return("Int(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("Int(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (!jj_rescan) trace_call("Type(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) { if (!jj_rescan) trace_return("Type(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("Type(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_44()
 {
    if (jj_scan_token(LCB)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RCB)) return true;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_43()
 {
    if (jj_scan_token(EXC)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_42()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (!jj_rescan) trace_call("MethodDeclaration(LOOKING AHEAD...)");
    if (jj_scan_token(PUBLIC)) { if (!jj_rescan) trace_return("MethodDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_15()) { if (!jj_rescan) trace_return("MethodDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(IDENTIFIER)) { if (!jj_rescan) trace_return("MethodDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("MethodDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_41()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3_40()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_39()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_38()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (!jj_rescan) trace_call("ExpressionTerminals(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) { if (!jj_rescan) trace_return("ExpressionTerminals(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("ExpressionTerminals(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_29()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LCB)) return true;
    if (jj_scan_token(RCB)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (!jj_rescan) trace_call("AfterNew(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) { if (!jj_rescan) trace_return("AfterNew(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("AfterNew(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_36()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (!jj_rescan) trace_call("MainDeclaration(LOOKING AHEAD...)");
    if (jj_scan_token(STATIC)) { if (!jj_rescan) trace_return("MainDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(VOID)) { if (!jj_rescan) trace_return("MainDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(MAIN)) { if (!jj_rescan) trace_return("MainDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("MainDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (!jj_rescan) trace_call("New(LOOKING AHEAD...)");
    if (jj_scan_token(NEW)) { if (!jj_rescan) trace_return("New(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_23()) { if (!jj_rescan) trace_return("New(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("New(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_10()
 {
    if (!jj_rescan) trace_call("VarDeclaration(LOOKING AHEAD...)");
    if (jj_3R_15()) { if (!jj_rescan) trace_return("VarDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(IDENTIFIER)) { if (!jj_rescan) trace_return("VarDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(INTEGER)) { if (!jj_rescan) trace_return("VarDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("VarDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_23()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LCB)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (!jj_rescan) trace_call("Declaration(LOOKING AHEAD...)");
    if (jj_scan_token(PUBLIC)) { if (!jj_rescan) trace_return("Declaration(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) { if (!jj_rescan) trace_return("Declaration(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("Declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_22()
 {
    if (!jj_rescan) trace_call("AfterPoint(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) { if (!jj_rescan) trace_return("AfterPoint(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("AfterPoint(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_34()
 {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (!jj_rescan) trace_call("Point(LOOKING AHEAD...)");
    if (jj_scan_token(POINT)) { if (!jj_rescan) trace_return("Point(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_22()) { if (!jj_rescan) trace_return("Point(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Point(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (!jj_rescan) trace_call("ExpressionL(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) { if (!jj_rescan) trace_return("ExpressionL(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("ExpressionL(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (!jj_rescan) trace_call("Expression(LOOKING AHEAD...)");
    if (jj_3R_21()) { if (!jj_rescan) trace_return("Expression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("Expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_22()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LSB)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProgramTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[44];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Program(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Program(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProgramTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Program(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProgramTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Program(ProgramTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ProgramTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 44; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
